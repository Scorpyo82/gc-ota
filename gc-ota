#!/system/bin/sh


    #######################################
    ##  Script realizado por Scorpyo82   ##
    ##   Para la aplicación de ajustes   ##
    ##  de la CustomROM GingerCerecilla  ##
    #######################################

#    gc-ota es un script que se encarga de
#    comprobar las actualizaciones que pueda
#    haber en el repositorio oficial de GingerCerecilla
#
#    También descargará las actualizaciones y prepara
#    todo lo necesario para reiniciar e instalarla
#
#    Miguel Ponce Torres
#    Copyright (C) <2014> <Miguel Ponce Torres>
#    mail: miguelponcetorres@gmail.com
#
#    Aún así, no es totalmente necesario tener instalado
#    la app "Ajustes especiales GC" ya que este Script
#    Puede ser llamado mediante argumentos desde línea
#    de comandos
#
#    Este Script y sus métodos están protegidos bajo licencia GNU GPL
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    Este script está diseñado para que funcione bajo sistemas
#    rooteados y con busybox instalado.


#VARIABLES
VERSION="1.0"
LOG="/system/gc-ota_$VERSION.log"	#Log del script
KEY_RECOVERY_OLD="/cache/recovery/load-recovery-old"	#Archivo clave a ser interpretado por el inicio de recovery selectivo
PATH_HOME="/sdcard/GC-OTA/"		#Ruta raiz para los trabajos de la aplicación
PATH_REPO_DOWNLOAD="/sdcard/GC-OTA/repo/"	#Ruta donde se descargará la lista de actualizaciones
PATH_FILES_DOWNLOAD="/sdcard/GC-OTA/files"	#Ruta donde se descargarán los achivos de actualizaciones
VERSION_GINGER=$(getprop gingercerecilla.version)	#Valor de la versión de la ROM actual 
UPDATE_ACTUAL=$(getprop gingercerecilla.update)		#Valor del último update instalado o número de actualización realizada
URL_REPO=$(getprop gingercerecilla.url.repo)		#Dirección hasta el repositorio en el que se descargará la información OTA

# Variable para el archivo de bloqueo
LOCKFILE=/cache/recovery/gc-ota.lock

## FUNCIONES:

function SALIR(){
## Se borra el archivo de bloqueo y se monta system como solo lectura
rm $LOCKFILE
exit 1
}

function CHECK_RUN(){
## Función que comprueba si existe el archivo de bloqueo
## para que la aplicación no se ejecute dos veces

	echo ""
	if [ ! -e $LOCKFILE ]; then
		# Si no existe el archivo de bloqueo se crea
		# uno nuevo y se continua con la ejecución
		touch $LOCKFILE
	else
		#Mensaje para comunicar que aún se están ejecutando tareas
		echo "El archivo de bloqueo de gc-ota aún exite"
		echo "¿Está la aplicación en uso?"
		exit
	fi

}

function VAR_CONTROL(){
## Función para controlar que no haya ni una sola variable vacía de las importantes
	if [ $VERSION_GINGER == "" ] || [ $UPDATE_ACTUAL == "" ] || [ $URL_REPO == "" ]
	then
		echo "Alguna de las variables en /system/build.prop no están definidas adecuadamente."
		SALIR
	else
		echo "Datos de versión actual obtenidos con exito"
		return 0
	fi
}


function CHECK_NET(){
## Función que comprueba el acceso a internet.

	echo "Comprobado el acceso al servidor web..."
	ping -c 1 www.pc-citos.es
	if [ $? == "0" ]
	then
		echo "Disponibilidad del servidor web comprobado y correcto"
		return 0
	else
		echo "Problema con el acceso al servidor web"
		SALIR
	fi
}

function CHECK_PATH_SD(){
## Función que comprueba si existe la extructura adecuada dentro de la SD para copiar los archivos.
	
	if [ ! -e $PATH_HOME ] || [ ! -e $PATH_FILES_DOWNLOAD ] || [ ! -e $PATH_REPO_DOWNLOAD ]
	then
		echo "Creando direcotrios necesarios en tarjeta SD..."
		mkdir -p $PATH_HOME $PATH_REPO_DOWNLOAD $PATH_FILES_DOWNLOAD
		echo "Directorios creados."
	else
		echo "Directorios en tarjeta SD detectados."
	fi


}

function DOWNLOAD_REPO(){
## Función que actualiza el archivo de repositorio con las actualizaciones publicadas en el server
	CHECK_PATH_SD
	CHECK_NET
	rm  $PATH_REPO_DOWNLOAD/updates
	wget $URL_REPO -P $PATH_REPO_DOWNLOAD

}


function SEARH_UPDATE(){
## Función que compara las versión actual del sistema, y la actualización corriente para buscar y seleccionar la actualización justo por encima.

	if [ -e $PATH_REPO_DOWNLOAD/updates ]
	then
		# Generamos un archivo temporal limpio (sin líneas vacías ni títulos de columnas) del archivo de repo.
		sed '1d' $PATH_REPO_DOWNLOAD/updates | sed '/^$/d' | sed '/./!d' > $PATH_REPO_DOWNLOAD/updates_temp

		# Buscaremos línea a línea
		while read line
		do
			# Si en esta línea se encuentra la misma versión en la columna 1 y una actualización un número mayor en la columna 2 entonces
			# se procede a anotar la dirección en la que está el paquete, su md5 y demás.
			VERSION_ON_REPO=$(echo $line | awk '{print $1}')
			UPDATE_ON_REPO=$(echo $line | awk '{print $2}')
			if [ $VERSION_ON_REPO == $VERSION_GINGER ] && [ $UPDATE_ON_REPO -gt $UPDATE_ACTUAL ]
			then
				MD5SUM_ZIP_REPO=$(echo $line | awk '{print $3}')
				LINK_UPDATE=$(echo $line | awk '{print $4}')
				CAMBIOS=$(echo $line | awk '{print $5}' | sed 's/_/ /g')
	
				echo "Se ha encontrado una actualización para la versión que está utilizando:"
				echo "Actualización nº $UPDATE_ON_REPO para la versión $UPDATE_ACTUAL"
				echo "Cambios:"
				echo $CAMBIOS
				break
				return
			fi

		echo "No se han encontrado actualizaciones, inténtelo más adelante"

		done < $PATH_REPO_DOWNLOAD/updates_temp

	else
		echo "Actualmente no hay ningún fichero de repositorio descargado..."
		echo "Use [gc-ota --update] para descargarlo desde el servidor web e inténtelo de nuevo"
	fi
}

function PREPARE_REBOOT(){
## Función que prepara todo lo necesario para actualizar el sistema con el nuevo update.zip

	#Fijando el nombre del paquete:
	UPDATEZIP="GC_v"$VERSION_GINGER"_Update_"$UPDATE_ON_REPO".zip"
	#Descargando paquete
	wget $LINK_UPDATE -O $PATH_FILES_DOWNLOAD/$UPDATEZIP
	if [ $? != 0 ]
	then
		echo "Ocurrión un error al descargar el archivo..."
		echo "Abortado"
		SALIR
	else
		echo "Archivo descargado con exito"
	fi
	
	#Obteniendo y comparando md5
	MD5SUM_ZIP=$(md5sum $PATH_FILES_DOWNLOAD/$UPDATEZIP | awk '{print $1}')
	if [ $MD5SUM_ZIP != $MD5SUM_ZIP_REPO ]
	then
		echo "La suma de verificación del archivo descargado no coincide con la que se esperaba"
		echo "¿¿Archivo corrupto??"
		return 1
	else
		echo "Suma de verificación exitosa"
	fi
	
	#Escribiendo archivo command con las ordenes de instalación:
	echo "--update_package="$PATH_FILES_DOWNLOAD/$UPDATEZIP > /cache/recovery/command

	#Escribiendo el archivo clave para que el sistema de encendido selectivo use el viejo binario de recovery 
	touch $KEY_RECOVERY_OLD

	echo "El sistema está listo para reiniciar en modo recovery y actualizarse de forma automática"
	echo "Use [reboot recovery] para reiniciar en modo recovery"

}

## Gestión de argumentos

CHECK_RUN
VAR_CONTROL #Siempre comprobar que las variables se han podido leer con exito

case $1 in
	--check) #Busca información en el último repo descargado
		echo "Buscando la última información sobre el repositorio actual..."
		echo ""
		SEARH_UPDATE
	;;

	--update) #Actualiza el repositorio, muestra información, pero no actualiza el sistema
		DOWNLOAD_REPO
	;;
	
	--upgrade) # Actualiza el sistema con la versión superior encontrada
		SEARH_UPDATE
		DOWNLOAD_REPO
		PREPARE_REBOOT
	;;

	--help)
		echo "Ayuda aún no implementada"
	;;

	*)
		echo "Comando no reconocido"
esac

SALIR



